/*
Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/GoogleCloudPlatform/cloud-run-events/pkg/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GCSSourceLister helps list GCSSources.
type GCSSourceLister interface {
	// List lists all GCSSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GCSSource, err error)
	// GCSSources returns an object that can list and get GCSSources.
	GCSSources(namespace string) GCSSourceNamespaceLister
	GCSSourceListerExpansion
}

// gCSSourceLister implements the GCSSourceLister interface.
type gCSSourceLister struct {
	indexer cache.Indexer
}

// NewGCSSourceLister returns a new GCSSourceLister.
func NewGCSSourceLister(indexer cache.Indexer) GCSSourceLister {
	return &gCSSourceLister{indexer: indexer}
}

// List lists all GCSSources in the indexer.
func (s *gCSSourceLister) List(selector labels.Selector) (ret []*v1alpha1.GCSSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GCSSource))
	})
	return ret, err
}

// GCSSources returns an object that can list and get GCSSources.
func (s *gCSSourceLister) GCSSources(namespace string) GCSSourceNamespaceLister {
	return gCSSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GCSSourceNamespaceLister helps list and get GCSSources.
type GCSSourceNamespaceLister interface {
	// List lists all GCSSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GCSSource, err error)
	// Get retrieves the GCSSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GCSSource, error)
	GCSSourceNamespaceListerExpansion
}

// gCSSourceNamespaceLister implements the GCSSourceNamespaceLister
// interface.
type gCSSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GCSSources in the indexer for a given namespace.
func (s gCSSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GCSSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GCSSource))
	})
	return ret, err
}

// Get retrieves the GCSSource from the indexer for a given namespace and name.
func (s gCSSourceNamespaceLister) Get(name string) (*v1alpha1.GCSSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gcssource"), name)
	}
	return obj.(*v1alpha1.GCSSource), nil
}
